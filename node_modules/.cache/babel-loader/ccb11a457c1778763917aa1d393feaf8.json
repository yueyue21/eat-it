{"ast":null,"code":"var _jsxFileName = \"/Users/chris/Desktop/eat-it/src/components/Meals/ItemForm.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ItemForm = props => {\n  _s();\n\n  const [amountIsValid, setAmountIsValid] = useState(true);\n  const amountInputRef = useRef();\n\n  const submitHandler = event => {\n    event.preventDefault();\n    let enteredAmount = amountInputRef.current.value;\n\n    if (enteredAmount.trim().length === 0 || enteredAmount < 1) {\n      setAmountIsValid(false);\n      return;\n    }\n\n    enteredAmount = parseInt(enteredAmount); // console.log(props);\n\n    props.onAddToCart(enteredAmount);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-nowrap\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Quantity: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: amountInputRef,\n        id: \"quantity\",\n        type: \"number\",\n        min: 0,\n        defaultValue: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-primary mt-2 ml-auto\",\n      children: \"Add to cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: !amountIsValid && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-danger\",\n        children: \"Please enter a valid positive number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ItemForm, \"49LGRK4jBiAcXkiYfsTkxzkpjmw=\");\n\n_c = ItemForm;\nexport default ItemForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ItemForm\");","map":{"version":3,"sources":["/Users/chris/Desktop/eat-it/src/components/Meals/ItemForm.js"],"names":["useRef","useState","ItemForm","props","amountIsValid","setAmountIsValid","amountInputRef","submitHandler","event","preventDefault","enteredAmount","current","value","trim","length","parseInt","onAddToCart"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;;;AACA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAMK,cAAc,GAAGN,MAAM,EAA7B;;AACA,QAAMO,aAAa,GAAIC,KAAD,IAAW;AAC/BA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAIC,aAAa,GAAGJ,cAAc,CAACK,OAAf,CAAuBC,KAA3C;;AACA,QAAIF,aAAa,CAACG,IAAd,GAAqBC,MAArB,KAAgC,CAAhC,IAAqCJ,aAAa,GAAG,CAAzD,EAA4D;AAC1DL,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACA;AACD;;AACDK,IAAAA,aAAa,GAAGK,QAAQ,CAACL,aAAD,CAAxB,CAP+B,CAQ/B;;AACAP,IAAAA,KAAK,CAACa,WAAN,CAAkBN,aAAlB;AACD,GAVD;;AAYA,sBACE;AAAM,IAAA,QAAQ,EAAEH,aAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,GAAG,EAAED,cADP;AAEE,QAAA,EAAE,EAAC,UAFL;AAGE,QAAA,IAAI,EAAC,QAHP;AAIE,QAAA,GAAG,EAAE,CAJP;AAKE,QAAA,YAAY,EAAE;AALhB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAWE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,8BAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,eAcE;AAAA,gBACG,CAACF,aAAD,iBACC;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD,CAvCD;;GAAMF,Q;;KAAAA,Q;AAyCN,eAAeA,QAAf","sourcesContent":["import { useRef, useState } from \"react\";\nconst ItemForm = (props) => {\n  const [amountIsValid, setAmountIsValid] = useState(true);\n  const amountInputRef = useRef();\n  const submitHandler = (event) => {\n    event.preventDefault();\n    let enteredAmount = amountInputRef.current.value;\n    if (enteredAmount.trim().length === 0 || enteredAmount < 1) {\n      setAmountIsValid(false);\n      return;\n    }\n    enteredAmount = parseInt(enteredAmount);\n    // console.log(props);\n    props.onAddToCart(enteredAmount);\n  };\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className=\"text-nowrap\">\n        <label>Quantity: </label>\n        <input\n          ref={amountInputRef}\n          id=\"quantity\"\n          type=\"number\"\n          min={0}\n          defaultValue={1}\n        />\n      </div>\n      <button type=\"submit\" className=\"btn btn-primary mt-2 ml-auto\">\n        Add to cart\n      </button>\n      <div>\n        {!amountIsValid && (\n          <div className=\"text-danger\">\n            Please enter a valid positive number\n          </div>\n        )}\n      </div>\n    </form>\n  );\n};\n\nexport default ItemForm;\n"]},"metadata":{},"sourceType":"module"}